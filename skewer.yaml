title: Skupper Hello World using YAML
subtitle: A minimal HTTP application deployed across Kubernetes clusters using Skupper
overview: |
  This example is a variant of [Hello World deployed across sites using Skupper YAML][hello-world-yaml] that
  is deployed using YAML custom resources instead of imperative
  commands. The backend workload is deployed in a separate namespace.

  It contains two services:

  * A backend service, deployed in the north namespace that exposes an 
    `/api/hello` endpoint.  It
    returns greetings of the form `Hi, <your-name>.  I am <my-name>
    (<pod-name>)`.

  * A frontend service that sends greetings to the backend and
    fetches new greetings in response.

  In this scenario, each service runs in a different Kubernetes
  cluster.  The frontend runs in a namespace on cluster 1 called West,
  and the backend runs in a namespace on cluster 2 called North.
  The North namespace is not a Skupper site, but can be exposed through the East
  site namespace.

  <img src="images/entities.svg" width="640"/>

  Skupper enables you to place the backend in one cluster and the
  frontend in another and maintain connectivity between the two
  services without exposing the backend to the public internet.

  [hello-world-yaml]: https://github.com/skupperproject/skupper-example-yaml
sites:
  west:
    title: West
    platform: kubernetes
    namespace: west
    env:
      KUBECONFIG: ~/.kube/config-west
  east:
    title: East
    platform: kubernetes
    namespace: east
    env:
      KUBECONFIG: ~/.kube/config-east
  north:
    title: North
    platform: kubernetes
    namespace: north
    env:
      KUBECONFIG: ~/.kube/config-north

steps:
  - standard: platform/access_your_kubernetes_clusters
  - standard: platform/create_your_kubernetes_namespaces
  - standard: platform/install_skupper_on_your_kubernetes_clusters
  - title: Apply your YAML resources
    preamble: |
      To configure our example sites and service bindings, we are
      using the following resources:

      West:

      * [site.yaml](west/site.yaml) - The Skupper _Site_ resource for
        West
      * [frontend.yaml](west/frontend.yaml) - The Hello World frontend
        deployment
      * [listener.yaml](west/listener.yaml) - A Skupper _Listener_
        resource for exposing the backend in East to the local
        frontend

      North:

      * [backend.yaml](north/backend.yaml) - The Hello World backend
        deployment
      * [attachedconnector.yaml](north/attachedconnector.yaml) - A Skupper _AttachedConnector_
        resource for exposing resource to site namespace

      East:

      * [site.yaml](east/site.yaml) - The Skupper _Site_ resource for
        East
      * [attachedconnectorbinding.yaml](east/attachedconnectorbinding.yaml) - A Skupper _AttachedConnectorBinding_
        resource for binding the backend to the listener in West

      Let's look at these resources in more detail.

      ### Resources in West

      The _Site_ resource defines a Skupper site for its associated
      Kubernetes namespace.  This is where you set site configuration
      options.  See the [Site resource reference][site-config] for
      more information.

      The `linkAccess: default` field configures site West to accept
      site-to-site links.  This example creates a link from East to
      West, so the receiving side, West, must enable link access.

      [site-config]: https://skupperproject.github.io/refdog/resources/site.html

      [site.yaml](west/site.yaml):

      ~~~ yaml
      apiVersion: skupper.io/v1alpha1
      kind: Site
      metadata:
        name: west
        namespace: west
      spec:
        linkAccess: default
      ~~~

      The frontend is a standard Kubernetes deployment.

      [frontend.yaml](west/frontend.yaml):

      ~~~ yaml
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: frontend
        labels:
          app: frontend
      spec:
        selector:
          matchLabels:
            app: frontend
        replicas: 1
        template:
          metadata:
            labels:
              app: frontend
          spec:
            containers:
              - name: frontend
                image: quay.io/skupper/hello-world-frontend
                ports:
                  - containerPort: 8080
      ~~~

      The code in frontend makes API calls to
      `http://backend:8080/api/hello`.  The _Listener_ resource below
      configures the router to expose a connection endpoint at
      `backend:8080` and forward any connections there to routers in
      remote sites using the routing key `backend`.  See the [Listener
      resource reference][listener-config] for more information.

      [listener-config]: https://skupperproject.github.io/refdog/resources/listener.html

      [listener.yaml](west/listener.yaml):

      ~~~ yaml
      apiVersion: skupper.io/v1alpha1
      kind: Listener
      metadata:
        name: backend
        namespace: west
      spec:
        port: 8080
        host: backend
        routingKey: backend
      ~~~

      ### Resources in East

      The _Site_ resource for East.

      [site.yaml](east/site.yaml):

      ~~~ yaml
      apiVersion: skupper.io/v1alpha1
      kind: Site
      metadata:
        name: east
        namespace: east
      ~~~

      The backend is a standard Kubernetes deployment.

      [backend.yaml](north/backend.yaml):

      ~~~ yaml
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: backend
        labels:
          app: backend
      spec:
        selector:
          matchLabels:
            app: backend
        replicas: 3
        template:
          metadata:
            labels:
              app: backend
          spec:
            containers:
              - name: backend
                image: quay.io/skupper/hello-world-backend
                ports:
                  - containerPort: 8080
      ~~~

      
      ### Applying the resources

      Now we're ready to apply everything.  Use the `kubectl apply`
      command with the resources for each site.

      **Note:** If you are using Minikube, [you need to start
      `minikube tunnel`][minikube-tunnel] before you create the
      Skupper sites.

      [minikube-tunnel]: https://skupper.io/start/minikube.html#running-minikube-tunnel
    commands:
      west:
        - run: kubectl apply -f west/site.yaml -f west/frontend.yaml -f west/listener.yaml
          output: |
            site.skupper.io/west created
            deployment.apps/frontend created
            listener.skupper.io/backend created
        - run: kubectl wait site/west --for condition=Ready --timeout 2m
          apply: test
        - await_resource: deployment/frontend
      east:
        - run: kubectl apply -f east/site.yaml -f east/backend.yaml -f east/attachedconnectorbinding.yaml
          output: |
            site.skupper.io/east created
            deployment.apps/backend created
            attachedconnectorbinding.skupper.io/backend created
        - run: kubectl wait site/east --for condition=Ready --timeout 2m

      north:
        - run: kubectl apply -f north/backend.yaml -f east/attachedconnector.yaml
          output: |
            site.skupper.io/east created
            deployment.apps/backend created
            attachedconnector.skupper.io/backend created
          apply: test
        - await_resource: deployment/backend

  - standard: skupper/link_your_sites/kubernetes_cli
    preamble: |
      A Skupper _link_ is a channel for communication between two
      sites.  Links serve as a transport for application connections
      and requests.

      You can configure sites and service bindings declaratively, but
      linking sites is different.  To create a link, you must have the
      authentication secret and connection details of the remote site.
      Since these cannot always be known in advance, linking is
      usually procedural, not declarative.

      <!--
      **Note:** There are several ways to automate the generation and
      distribution of tokens across sites, using for example Ansible,
      Backstage, or Vault.  See [Token distribution][XXX] for more
      information.
      -->

      Skupper provides tokens as one way to securely create
      site-to-site links.  This example uses the Skupper command-line
      tool to issue the secret token in West and redeem the token for
      a link in East.

      To install the Skupper command:

      ~~~ shell
      curl https://skupper.io/v2/install.sh | sh
      ~~~

      For more installation options, see [Installing
      Skupper][install].

      Once the command is installed, use `skupper token issue` in West
      to generate the token.  Then, use `skupper token redeem` in East
      to create the link.

      [install]: https://skupper.io/install/index.html
  - standard: hello_world/access_the_frontend_service/kubernetes_cli
  - standard: skupper/cleaning_up/kubernetes_cli
    commands:
      west:
        - run: kubectl delete -f west/ --ignore-not-found
      east:
        - run: kubectl delete -f east/ --ignore-not-found
